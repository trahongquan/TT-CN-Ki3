# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

# Tên của workflow
name: .NET Core Desktop

# Sự kiện để kích hoạt workflow
on:
  push:
    branches: [ "master" ]

# Cấu hình công việc chính của workflow
jobs:

  build:

    # Thiết lập chiến lược chạy dựa trên các cấu hình Debug và Release
    strategy:
      matrix:
        configuration: [Debug, Release]

    # Chạy workflow trên hệ điều hành Windows
    runs-on: windows-latest

    # Biến môi trường
    env:
      Solution_Name: QLTTBCNTT-WinForm.sln
      Test_Project_Path: QLTTBCNTT-WinForm
      Wap_Project_Directory: QLTTBCNTT-WinForm
      Wap_Project_Path: QLTTBCNTT-WinForm/QLTTBCNTT-WinForm.csproj

    # Các bước của workflow
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Cài đặt .NET Core
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    # Thêm MSBuild vào đường dẫn
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Chạy tất cả các bài kiểm tra đơn vị trong solution
    - name: Execute unit tests
      run: dotnet test $env:Test_Project_Path

    # Khôi phục ứng dụng để tạo thư mục obj với RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Giải mã pfx được mã hóa base 64 và lưu Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Tạo gói ứng dụng bằng cách xây dựng và đóng gói dự án Windows Application Packaging
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # Xóa pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Thêm một bài kiểm tra đơn giản
    - name: Run custom test
      run: |
        echo "Running custom test..."
        # Thêm lệnh kiểm tra tại đây (ví dụ: dotnet test $env:Test_Project_Path)
        echo "Custom test completed."

    # Tải lên gói MSIX
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
